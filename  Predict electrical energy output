{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":8378765,"sourceType":"datasetVersion","datasetId":4982368}],"dockerImageVersionId":30698,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-05-10T19:41:46.473061Z","iopub.execute_input":"2024-05-10T19:41:46.473432Z","iopub.status.idle":"2024-05-10T19:41:46.846423Z","shell.execute_reply.started":"2024-05-10T19:41:46.473402Z","shell.execute_reply":"2024-05-10T19:41:46.845426Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import pandas as pd\n\n# Assuming your CSV file is named 'data.csv'\ndf = pd.read_csv(r'/kaggle/input/energy-output/CCPP_data.csv')\n\n# Display the first few rows of the DataFrame to verify it was read correctly\nprint(df.head())\n","metadata":{"execution":{"iopub.status.busy":"2024-05-10T19:42:52.456510Z","iopub.execute_input":"2024-05-10T19:42:52.457366Z","iopub.status.idle":"2024-05-10T19:42:52.495068Z","shell.execute_reply.started":"2024-05-10T19:42:52.457334Z","shell.execute_reply":"2024-05-10T19:42:52.494167Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error\n\n# Assuming 'PE' is the target variable and the rest are features\nX = df.drop(columns=['PE'])  # Features\ny = df['PE']  # Target variable\n\n# Splitting data into train and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Initializing and fitting the linear regression model\nlinear_reg = LinearRegression()\nlinear_reg.fit(X_train, y_train)\n\n# Predicting on the test set\ny_pred = linear_reg.predict(X_test)\n\n# Evaluating performance using Mean Squared Error (MSE)\nmse = mean_squared_error(y_test, y_pred)\nprint(\"Mean Squared Error:\", mse)\n","metadata":{"execution":{"iopub.status.busy":"2024-05-10T19:43:47.077975Z","iopub.execute_input":"2024-05-10T19:43:47.078707Z","iopub.status.idle":"2024-05-10T19:43:47.118722Z","shell.execute_reply.started":"2024-05-10T19:43:47.078676Z","shell.execute_reply":"2024-05-10T19:43:47.117807Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from sklearn.tree import DecisionTreeRegressor\n\n# Initializing and fitting the decision tree regressor model\ndecision_tree = DecisionTreeRegressor(random_state=42)\ndecision_tree.fit(X_train, y_train)\n\n# Predicting on the test set\ny_pred_dt = decision_tree.predict(X_test)\n\n# Evaluating performance using Mean Squared Error (MSE)\nmse_dt = mean_squared_error(y_test, y_pred_dt)\nprint(\"Decision Tree Mean Squared Error:\", mse_dt)\n","metadata":{"execution":{"iopub.status.busy":"2024-05-10T19:44:03.485625Z","iopub.execute_input":"2024-05-10T19:44:03.486281Z","iopub.status.idle":"2024-05-10T19:44:03.607781Z","shell.execute_reply.started":"2024-05-10T19:44:03.486249Z","shell.execute_reply":"2024-05-10T19:44:03.606857Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from sklearn.ensemble import RandomForestRegressor\n\n# Initializing and fitting the Random Forest regressor model\nrandom_forest = RandomForestRegressor(random_state=42)\nrandom_forest.fit(X_train, y_train)\n\n# Predicting on the test set\ny_pred_rf = random_forest.predict(X_test)\n\n# Evaluating performance using Mean Squared Error (MSE)\nmse_rf = mean_squared_error(y_test, y_pred_rf)\nprint(\"Random Forest Mean Squared Error:\", mse_rf)\n","metadata":{"execution":{"iopub.status.busy":"2024-05-10T19:44:09.628504Z","iopub.execute_input":"2024-05-10T19:44:09.629326Z","iopub.status.idle":"2024-05-10T19:44:12.210897Z","shell.execute_reply.started":"2024-05-10T19:44:09.629291Z","shell.execute_reply":"2024-05-10T19:44:12.209791Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from sklearn.model_selection import cross_val_score\n\n# Define a function to perform cross-validation and return mean MSE\ndef cross_val_mse(model, X, y, cv=10):\n    mse_scores = -cross_val_score(model, X, y, scoring=\"neg_mean_squared_error\", cv=cv)\n    return mse_scores.mean()\n\n# Compare models using cross-validation\nlinear_reg_cv_mse = cross_val_mse(linear_reg, X_train, y_train)\ndecision_tree_cv_mse = cross_val_mse(decision_tree, X_train, y_train)\nrandom_forest_cv_mse = cross_val_mse(random_forest, X_train, y_train)\n\nprint(\"Cross-Validation Mean Squared Error for Linear Regression:\", linear_reg_cv_mse)\nprint(\"Cross-Validation Mean Squared Error for Decision Tree:\", decision_tree_cv_mse)\nprint(\"Cross-Validation Mean Squared Error for Random Forest:\", random_forest_cv_mse)\n","metadata":{"execution":{"iopub.status.busy":"2024-05-10T20:09:01.918534Z","iopub.execute_input":"2024-05-10T20:09:01.919518Z","iopub.status.idle":"2024-05-10T20:09:24.208504Z","shell.execute_reply.started":"2024-05-10T20:09:01.919481Z","shell.execute_reply":"2024-05-10T20:09:24.207534Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"cross_val_score(model, X, y, scoring=\"neg_mean_squared_error\", cv=cv): This function computes the negative mean squared error (neg_mean_squared_error) for each cross-validation fold. It uses the provided model (model), feature matrix (X), target variable (y), and the number of cross-validation folds (cv).\n-cross_val_score(...): The negative of mean squared error is used because cross_val_score returns negated values to reflect that higher scores are better. By negating it, we get the actual mean squared error values.\nmse_scores.mean(): This computes the mean of the mean squared error scores across all cross-validation folds.","metadata":{}},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Notes:\n\n* Since the problem involves predicting the electrical energy output based on ambient variables, it appears to be a regression problem. \n\n* Linear regression, decision tree regression, and random forest regression are the ML approaches considered - all of which are suitable for regression tasks.\n\n* The appropriate output metric chosen for evaluating model performance is Mean Squared Error (MSE), which measures the average squared difference between predicted and actual values.\n\n* The features used in the model are assumed to be the ambient variables: temperature, ambient pressure, relative humidity, and exhaust vacuum.\n\n* The data is split into training and test sets using train_test_split function from sklearn.model_selection module.\n\n* The code uses cross-validation for comparing different models. Cross-validation helps in obtaining a more reliable estimate of the model's performance by using multiple subsets of the data for both training and validation.\n\n* The code compares the performance of linear regression, decision tree, and random forest models using cross-validation.\n\n*  Based on the cross-validation results, the code selects the model with the lowest Mean Squared Error (MSE) as the final model.\n\n* The performance of the final model is evaluated using the output metric (MSE) defined earlier. Here it is Random Forest: 12.00741507171895 with the lowers MSE. ","metadata":{}},{"cell_type":"markdown","source":"","metadata":{}}]}